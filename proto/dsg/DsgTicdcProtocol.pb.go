// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: DsgTicdcProtocol.proto

package DSGEntryProtocol

import (
	context "context"
	fmt "fmt"
	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The response message containing the greetings
type DsgTicdcStreamingReply struct {
	Code                 *int32   `protobuf:"varint,1,req,name=code" json:"code,omitempty"`
	Message              *string  `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DsgTicdcStreamingReply) Reset()         { *m = DsgTicdcStreamingReply{} }
func (m *DsgTicdcStreamingReply) String() string { return proto.CompactTextString(m) }
func (*DsgTicdcStreamingReply) ProtoMessage()    {}
func (*DsgTicdcStreamingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f94fe406e943977, []int{0}
}
func (m *DsgTicdcStreamingReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DsgTicdcStreamingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DsgTicdcStreamingReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DsgTicdcStreamingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DsgTicdcStreamingReply.Merge(m, src)
}
func (m *DsgTicdcStreamingReply) XXX_Size() int {
	return m.Size()
}
func (m *DsgTicdcStreamingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DsgTicdcStreamingReply.DiscardUnknown(m)
}

var xxx_messageInfo_DsgTicdcStreamingReply proto.InternalMessageInfo

func (m *DsgTicdcStreamingReply) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *DsgTicdcStreamingReply) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*DsgTicdcStreamingReply)(nil), "DsgTicdcStreamingReply")
}

func init() { proto.RegisterFile("DsgTicdcProtocol.proto", fileDescriptor_6f94fe406e943977) }

var fileDescriptor_6f94fe406e943977 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x73, 0x29, 0x4e, 0x0f,
	0xc9, 0x4c, 0x4e, 0x49, 0x0e, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x2b, 0x00, 0x31,
	0xa4, 0xc4, 0x5c, 0x82, 0xdd, 0x5d, 0xf3, 0x4a, 0x8a, 0x2a, 0x51, 0xc5, 0x95, 0xdc, 0x10, 0x3a,
	0x82, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0x33, 0xf3, 0xd2, 0x83, 0x52, 0x0b, 0x72, 0x2a, 0x85, 0x84,
	0xb8, 0x58, 0x92, 0xf3, 0x53, 0x52, 0x25, 0x18, 0x15, 0x98, 0x34, 0x58, 0x83, 0xc0, 0x6c, 0x21,
	0x09, 0x2e, 0xf6, 0xdc, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xce,
	0x20, 0x18, 0xd7, 0x28, 0x84, 0x4b, 0x10, 0xc3, 0x1c, 0x21, 0x7b, 0x2e, 0x09, 0x2c, 0x86, 0x17,
	0x96, 0xa6, 0x16, 0x97, 0x08, 0xb1, 0xe9, 0x81, 0x9d, 0x23, 0x25, 0xae, 0x87, 0xdd, 0x7e, 0x25,
	0x06, 0x0d, 0x46, 0x27, 0x9b, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48,
	0x8e, 0x71, 0xc6, 0x63, 0x39, 0x06, 0x2e, 0x91, 0xe4, 0xfc, 0x5c, 0xbd, 0x82, 0xd2, 0xa4, 0x9c,
	0xcc, 0xe4, 0x62, 0x88, 0x17, 0x92, 0xf3, 0x73, 0x9c, 0x04, 0xd0, 0x7d, 0xed, 0xc1, 0x18, 0xc0,
	0x08, 0x08, 0x00, 0x00, 0xff, 0xff, 0x83, 0x6c, 0x66, 0x1e, 0x0c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DsgTicdcStreamingClient is the client API for DsgTicdcStreaming service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DsgTicdcStreamingClient interface {
	// Streams a many greetings
	DsgTicdcStreamingRequest(ctx context.Context, opts ...grpc.CallOption) (DsgTicdcStreaming_DsgTicdcStreamingRequestClient, error)
}

type dsgTicdcStreamingClient struct {
	cc *grpc.ClientConn
}

func NewDsgTicdcStreamingClient(cc *grpc.ClientConn) DsgTicdcStreamingClient {
	return &dsgTicdcStreamingClient{cc}
}

func (c *dsgTicdcStreamingClient) DsgTicdcStreamingRequest(ctx context.Context, opts ...grpc.CallOption) (DsgTicdcStreaming_DsgTicdcStreamingRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DsgTicdcStreaming_serviceDesc.Streams[0], "/DsgTicdcStreaming/DsgTicdcStreamingRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &dsgTicdcStreamingDsgTicdcStreamingRequestClient{stream}
	return x, nil
}

type DsgTicdcStreaming_DsgTicdcStreamingRequestClient interface {
	Send(*Entry) error
	CloseAndRecv() (*DsgTicdcStreamingReply, error)
	grpc.ClientStream
}

type dsgTicdcStreamingDsgTicdcStreamingRequestClient struct {
	grpc.ClientStream
}

func (x *dsgTicdcStreamingDsgTicdcStreamingRequestClient) Send(m *Entry) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dsgTicdcStreamingDsgTicdcStreamingRequestClient) CloseAndRecv() (*DsgTicdcStreamingReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DsgTicdcStreamingReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DsgTicdcStreamingServer is the server API for DsgTicdcStreaming service.
type DsgTicdcStreamingServer interface {
	// Streams a many greetings
	DsgTicdcStreamingRequest(DsgTicdcStreaming_DsgTicdcStreamingRequestServer) error
}

// UnimplementedDsgTicdcStreamingServer can be embedded to have forward compatible implementations.
type UnimplementedDsgTicdcStreamingServer struct {
}

func (*UnimplementedDsgTicdcStreamingServer) DsgTicdcStreamingRequest(srv DsgTicdcStreaming_DsgTicdcStreamingRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method DsgTicdcStreamingRequest not implemented")
}

func RegisterDsgTicdcStreamingServer(s *grpc.Server, srv DsgTicdcStreamingServer) {
	s.RegisterService(&_DsgTicdcStreaming_serviceDesc, srv)
}

func _DsgTicdcStreaming_DsgTicdcStreamingRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DsgTicdcStreamingServer).DsgTicdcStreamingRequest(&dsgTicdcStreamingDsgTicdcStreamingRequestServer{stream})
}

type DsgTicdcStreaming_DsgTicdcStreamingRequestServer interface {
	SendAndClose(*DsgTicdcStreamingReply) error
	Recv() (*Entry, error)
	grpc.ServerStream
}

type dsgTicdcStreamingDsgTicdcStreamingRequestServer struct {
	grpc.ServerStream
}

func (x *dsgTicdcStreamingDsgTicdcStreamingRequestServer) SendAndClose(m *DsgTicdcStreamingReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dsgTicdcStreamingDsgTicdcStreamingRequestServer) Recv() (*Entry, error) {
	m := new(Entry)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DsgTicdcStreaming_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DsgTicdcStreaming",
	HandlerType: (*DsgTicdcStreamingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DsgTicdcStreamingRequest",
			Handler:       _DsgTicdcStreaming_DsgTicdcStreamingRequest_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "DsgTicdcProtocol.proto",
}

func (m *DsgTicdcStreamingReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DsgTicdcStreamingReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DsgTicdcStreamingReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		i -= len(*m.Message)
		copy(dAtA[i:], *m.Message)
		i = encodeVarintDsgTicdcProtocol(dAtA, i, uint64(len(*m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintDsgTicdcProtocol(dAtA, i, uint64(*m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDsgTicdcProtocol(dAtA []byte, offset int, v uint64) int {
	offset -= sovDsgTicdcProtocol(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DsgTicdcStreamingReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		n += 1 + sovDsgTicdcProtocol(uint64(*m.Code))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovDsgTicdcProtocol(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDsgTicdcProtocol(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDsgTicdcProtocol(x uint64) (n int) {
	return sovDsgTicdcProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DsgTicdcStreamingReply) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsgTicdcProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DsgTicdcStreamingReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DsgTicdcStreamingReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsgTicdcProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsgTicdcProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDsgTicdcProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDsgTicdcProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDsgTicdcProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsgTicdcProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDsgTicdcProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDsgTicdcProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDsgTicdcProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDsgTicdcProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDsgTicdcProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDsgTicdcProtocol
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDsgTicdcProtocol
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDsgTicdcProtocol
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDsgTicdcProtocol        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDsgTicdcProtocol          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDsgTicdcProtocol = fmt.Errorf("proto: unexpected end of group")
)
