/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pingcap.simple.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Bootstrap extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4544822576903373736L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Bootstrap\",\"namespace\":\"com.pingcap.simple.avro\",\"fields\":[{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"buildTs\",\"type\":\"long\"},{\"name\":\"tableSchema\",\"type\":{\"type\":\"record\",\"name\":\"TableSchema\",\"fields\":[{\"name\":\"database\",\"type\":\"string\"},{\"name\":\"table\",\"type\":\"string\"},{\"name\":\"tableID\",\"type\":\"long\"},{\"name\":\"version\",\"type\":\"long\"},{\"name\":\"columns\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ColumnSchema\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"dataType\",\"type\":{\"type\":\"record\",\"name\":\"DataType\",\"fields\":[{\"name\":\"mysqlType\",\"type\":\"string\"},{\"name\":\"charset\",\"type\":\"string\"},{\"name\":\"collate\",\"type\":\"string\"},{\"name\":\"length\",\"type\":\"long\"},{\"name\":\"decimal\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"elements\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"default\":null},{\"name\":\"unsigned\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"zerofill\",\"type\":[\"null\",\"boolean\"],\"default\":null}],\"docs\":\"each column's mysql type information\"}},{\"name\":\"nullable\",\"type\":\"boolean\"},{\"name\":\"default\",\"type\":[\"null\",\"string\"]}],\"docs\":\"each column's schema information\"}}},{\"name\":\"indexes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"IndexSchema\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"unique\",\"type\":\"boolean\"},{\"name\":\"primary\",\"type\":\"boolean\"},{\"name\":\"nullable\",\"type\":\"boolean\"},{\"name\":\"columns\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}],\"docs\":\"each index's schema information\"}}}],\"docs\":\"table schema information\"}}],\"docs\":\"the message format of the bootstrap event\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Bootstrap> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Bootstrap> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Bootstrap> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Bootstrap> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Bootstrap> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Bootstrap to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Bootstrap from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Bootstrap instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Bootstrap fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int version;
  private java.lang.CharSequence type;
  private long buildTs;
  private com.pingcap.simple.avro.TableSchema tableSchema;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Bootstrap() {}

  /**
   * All-args constructor.
   * @param version The new value for version
   * @param type The new value for type
   * @param buildTs The new value for buildTs
   * @param tableSchema The new value for tableSchema
   */
  public Bootstrap(java.lang.Integer version, java.lang.CharSequence type, java.lang.Long buildTs, com.pingcap.simple.avro.TableSchema tableSchema) {
    this.version = version;
    this.type = type;
    this.buildTs = buildTs;
    this.tableSchema = tableSchema;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return version;
    case 1: return type;
    case 2: return buildTs;
    case 3: return tableSchema;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: version = (java.lang.Integer)value$; break;
    case 1: type = (java.lang.CharSequence)value$; break;
    case 2: buildTs = (java.lang.Long)value$; break;
    case 3: tableSchema = (com.pingcap.simple.avro.TableSchema)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'version' field.
   * @return The value of the 'version' field.
   */
  public int getVersion() {
    return version;
  }


  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(int value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'buildTs' field.
   * @return The value of the 'buildTs' field.
   */
  public long getBuildTs() {
    return buildTs;
  }


  /**
   * Sets the value of the 'buildTs' field.
   * @param value the value to set.
   */
  public void setBuildTs(long value) {
    this.buildTs = value;
  }

  /**
   * Gets the value of the 'tableSchema' field.
   * @return The value of the 'tableSchema' field.
   */
  public com.pingcap.simple.avro.TableSchema getTableSchema() {
    return tableSchema;
  }


  /**
   * Sets the value of the 'tableSchema' field.
   * @param value the value to set.
   */
  public void setTableSchema(com.pingcap.simple.avro.TableSchema value) {
    this.tableSchema = value;
  }

  /**
   * Creates a new Bootstrap RecordBuilder.
   * @return A new Bootstrap RecordBuilder
   */
  public static com.pingcap.simple.avro.Bootstrap.Builder newBuilder() {
    return new com.pingcap.simple.avro.Bootstrap.Builder();
  }

  /**
   * Creates a new Bootstrap RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Bootstrap RecordBuilder
   */
  public static com.pingcap.simple.avro.Bootstrap.Builder newBuilder(com.pingcap.simple.avro.Bootstrap.Builder other) {
    if (other == null) {
      return new com.pingcap.simple.avro.Bootstrap.Builder();
    } else {
      return new com.pingcap.simple.avro.Bootstrap.Builder(other);
    }
  }

  /**
   * Creates a new Bootstrap RecordBuilder by copying an existing Bootstrap instance.
   * @param other The existing instance to copy.
   * @return A new Bootstrap RecordBuilder
   */
  public static com.pingcap.simple.avro.Bootstrap.Builder newBuilder(com.pingcap.simple.avro.Bootstrap other) {
    if (other == null) {
      return new com.pingcap.simple.avro.Bootstrap.Builder();
    } else {
      return new com.pingcap.simple.avro.Bootstrap.Builder(other);
    }
  }

  /**
   * RecordBuilder for Bootstrap instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Bootstrap>
    implements org.apache.avro.data.RecordBuilder<Bootstrap> {

    private int version;
    private java.lang.CharSequence type;
    private long buildTs;
    private com.pingcap.simple.avro.TableSchema tableSchema;
    private com.pingcap.simple.avro.TableSchema.Builder tableSchemaBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pingcap.simple.avro.Bootstrap.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.version)) {
        this.version = data().deepCopy(fields()[0].schema(), other.version);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.buildTs)) {
        this.buildTs = data().deepCopy(fields()[2].schema(), other.buildTs);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.tableSchema)) {
        this.tableSchema = data().deepCopy(fields()[3].schema(), other.tableSchema);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasTableSchemaBuilder()) {
        this.tableSchemaBuilder = com.pingcap.simple.avro.TableSchema.newBuilder(other.getTableSchemaBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Bootstrap instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pingcap.simple.avro.Bootstrap other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.version)) {
        this.version = data().deepCopy(fields()[0].schema(), other.version);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.buildTs)) {
        this.buildTs = data().deepCopy(fields()[2].schema(), other.buildTs);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tableSchema)) {
        this.tableSchema = data().deepCopy(fields()[3].schema(), other.tableSchema);
        fieldSetFlags()[3] = true;
      }
      this.tableSchemaBuilder = null;
    }

    /**
      * Gets the value of the 'version' field.
      * @return The value.
      */
    public int getVersion() {
      return version;
    }


    /**
      * Sets the value of the 'version' field.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.Bootstrap.Builder setVersion(int value) {
      validate(fields()[0], value);
      this.version = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'version' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.Bootstrap.Builder clearVersion() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.Bootstrap.Builder setType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.Bootstrap.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'buildTs' field.
      * @return The value.
      */
    public long getBuildTs() {
      return buildTs;
    }


    /**
      * Sets the value of the 'buildTs' field.
      * @param value The value of 'buildTs'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.Bootstrap.Builder setBuildTs(long value) {
      validate(fields()[2], value);
      this.buildTs = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'buildTs' field has been set.
      * @return True if the 'buildTs' field has been set, false otherwise.
      */
    public boolean hasBuildTs() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'buildTs' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.Bootstrap.Builder clearBuildTs() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'tableSchema' field.
      * @return The value.
      */
    public com.pingcap.simple.avro.TableSchema getTableSchema() {
      return tableSchema;
    }


    /**
      * Sets the value of the 'tableSchema' field.
      * @param value The value of 'tableSchema'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.Bootstrap.Builder setTableSchema(com.pingcap.simple.avro.TableSchema value) {
      validate(fields()[3], value);
      this.tableSchemaBuilder = null;
      this.tableSchema = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'tableSchema' field has been set.
      * @return True if the 'tableSchema' field has been set, false otherwise.
      */
    public boolean hasTableSchema() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'tableSchema' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pingcap.simple.avro.TableSchema.Builder getTableSchemaBuilder() {
      if (tableSchemaBuilder == null) {
        if (hasTableSchema()) {
          setTableSchemaBuilder(com.pingcap.simple.avro.TableSchema.newBuilder(tableSchema));
        } else {
          setTableSchemaBuilder(com.pingcap.simple.avro.TableSchema.newBuilder());
        }
      }
      return tableSchemaBuilder;
    }

    /**
     * Sets the Builder instance for the 'tableSchema' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.pingcap.simple.avro.Bootstrap.Builder setTableSchemaBuilder(com.pingcap.simple.avro.TableSchema.Builder value) {
      clearTableSchema();
      tableSchemaBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'tableSchema' field has an active Builder instance
     * @return True if the 'tableSchema' field has an active Builder instance
     */
    public boolean hasTableSchemaBuilder() {
      return tableSchemaBuilder != null;
    }

    /**
      * Clears the value of the 'tableSchema' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.Bootstrap.Builder clearTableSchema() {
      tableSchema = null;
      tableSchemaBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Bootstrap build() {
      try {
        Bootstrap record = new Bootstrap();
        record.version = fieldSetFlags()[0] ? this.version : (java.lang.Integer) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.buildTs = fieldSetFlags()[2] ? this.buildTs : (java.lang.Long) defaultValue(fields()[2]);
        if (tableSchemaBuilder != null) {
          try {
            record.tableSchema = this.tableSchemaBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("tableSchema"));
            throw e;
          }
        } else {
          record.tableSchema = fieldSetFlags()[3] ? this.tableSchema : (com.pingcap.simple.avro.TableSchema) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Bootstrap>
    WRITER$ = (org.apache.avro.io.DatumWriter<Bootstrap>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Bootstrap>
    READER$ = (org.apache.avro.io.DatumReader<Bootstrap>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.version);

    out.writeString(this.type);

    out.writeLong(this.buildTs);

    this.tableSchema.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.version = in.readInt();

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

      this.buildTs = in.readLong();

      if (this.tableSchema == null) {
        this.tableSchema = new com.pingcap.simple.avro.TableSchema();
      }
      this.tableSchema.customDecode(in);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.version = in.readInt();
          break;

        case 1:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        case 2:
          this.buildTs = in.readLong();
          break;

        case 3:
          if (this.tableSchema == null) {
            this.tableSchema = new com.pingcap.simple.avro.TableSchema();
          }
          this.tableSchema.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










