/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pingcap.simple.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TableSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2411447723455195695L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TableSchema\",\"namespace\":\"com.pingcap.simple.avro\",\"fields\":[{\"name\":\"database\",\"type\":\"string\"},{\"name\":\"table\",\"type\":\"string\"},{\"name\":\"tableID\",\"type\":\"long\"},{\"name\":\"version\",\"type\":\"long\"},{\"name\":\"columns\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ColumnSchema\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"dataType\",\"type\":{\"type\":\"record\",\"name\":\"DataType\",\"fields\":[{\"name\":\"mysqlType\",\"type\":\"string\"},{\"name\":\"charset\",\"type\":\"string\"},{\"name\":\"collate\",\"type\":\"string\"},{\"name\":\"length\",\"type\":\"long\"},{\"name\":\"decimal\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"elements\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"default\":null},{\"name\":\"unsigned\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"zerofill\",\"type\":[\"null\",\"boolean\"],\"default\":null}],\"docs\":\"each column's mysql type information\"}},{\"name\":\"nullable\",\"type\":\"boolean\"},{\"name\":\"default\",\"type\":[\"null\",\"string\"]}],\"docs\":\"each column's schema information\"}}},{\"name\":\"indexes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"IndexSchema\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"unique\",\"type\":\"boolean\"},{\"name\":\"primary\",\"type\":\"boolean\"},{\"name\":\"nullable\",\"type\":\"boolean\"},{\"name\":\"columns\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}],\"docs\":\"each index's schema information\"}}}],\"docs\":\"table schema information\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TableSchema> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TableSchema> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TableSchema> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TableSchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TableSchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TableSchema to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TableSchema from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TableSchema instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TableSchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence database;
  private java.lang.CharSequence table;
  private long tableID;
  private long version;
  private java.util.List<com.pingcap.simple.avro.ColumnSchema> columns;
  private java.util.List<com.pingcap.simple.avro.IndexSchema> indexes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TableSchema() {}

  /**
   * All-args constructor.
   * @param database The new value for database
   * @param table The new value for table
   * @param tableID The new value for tableID
   * @param version The new value for version
   * @param columns The new value for columns
   * @param indexes The new value for indexes
   */
  public TableSchema(java.lang.CharSequence database, java.lang.CharSequence table, java.lang.Long tableID, java.lang.Long version, java.util.List<com.pingcap.simple.avro.ColumnSchema> columns, java.util.List<com.pingcap.simple.avro.IndexSchema> indexes) {
    this.database = database;
    this.table = table;
    this.tableID = tableID;
    this.version = version;
    this.columns = columns;
    this.indexes = indexes;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return database;
    case 1: return table;
    case 2: return tableID;
    case 3: return version;
    case 4: return columns;
    case 5: return indexes;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: database = (java.lang.CharSequence)value$; break;
    case 1: table = (java.lang.CharSequence)value$; break;
    case 2: tableID = (java.lang.Long)value$; break;
    case 3: version = (java.lang.Long)value$; break;
    case 4: columns = (java.util.List<com.pingcap.simple.avro.ColumnSchema>)value$; break;
    case 5: indexes = (java.util.List<com.pingcap.simple.avro.IndexSchema>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'database' field.
   * @return The value of the 'database' field.
   */
  public java.lang.CharSequence getDatabase() {
    return database;
  }


  /**
   * Sets the value of the 'database' field.
   * @param value the value to set.
   */
  public void setDatabase(java.lang.CharSequence value) {
    this.database = value;
  }

  /**
   * Gets the value of the 'table' field.
   * @return The value of the 'table' field.
   */
  public java.lang.CharSequence getTable() {
    return table;
  }


  /**
   * Sets the value of the 'table' field.
   * @param value the value to set.
   */
  public void setTable(java.lang.CharSequence value) {
    this.table = value;
  }

  /**
   * Gets the value of the 'tableID' field.
   * @return The value of the 'tableID' field.
   */
  public long getTableID() {
    return tableID;
  }


  /**
   * Sets the value of the 'tableID' field.
   * @param value the value to set.
   */
  public void setTableID(long value) {
    this.tableID = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return The value of the 'version' field.
   */
  public long getVersion() {
    return version;
  }


  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(long value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'columns' field.
   * @return The value of the 'columns' field.
   */
  public java.util.List<com.pingcap.simple.avro.ColumnSchema> getColumns() {
    return columns;
  }


  /**
   * Sets the value of the 'columns' field.
   * @param value the value to set.
   */
  public void setColumns(java.util.List<com.pingcap.simple.avro.ColumnSchema> value) {
    this.columns = value;
  }

  /**
   * Gets the value of the 'indexes' field.
   * @return The value of the 'indexes' field.
   */
  public java.util.List<com.pingcap.simple.avro.IndexSchema> getIndexes() {
    return indexes;
  }


  /**
   * Sets the value of the 'indexes' field.
   * @param value the value to set.
   */
  public void setIndexes(java.util.List<com.pingcap.simple.avro.IndexSchema> value) {
    this.indexes = value;
  }

  /**
   * Creates a new TableSchema RecordBuilder.
   * @return A new TableSchema RecordBuilder
   */
  public static com.pingcap.simple.avro.TableSchema.Builder newBuilder() {
    return new com.pingcap.simple.avro.TableSchema.Builder();
  }

  /**
   * Creates a new TableSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TableSchema RecordBuilder
   */
  public static com.pingcap.simple.avro.TableSchema.Builder newBuilder(com.pingcap.simple.avro.TableSchema.Builder other) {
    if (other == null) {
      return new com.pingcap.simple.avro.TableSchema.Builder();
    } else {
      return new com.pingcap.simple.avro.TableSchema.Builder(other);
    }
  }

  /**
   * Creates a new TableSchema RecordBuilder by copying an existing TableSchema instance.
   * @param other The existing instance to copy.
   * @return A new TableSchema RecordBuilder
   */
  public static com.pingcap.simple.avro.TableSchema.Builder newBuilder(com.pingcap.simple.avro.TableSchema other) {
    if (other == null) {
      return new com.pingcap.simple.avro.TableSchema.Builder();
    } else {
      return new com.pingcap.simple.avro.TableSchema.Builder(other);
    }
  }

  /**
   * RecordBuilder for TableSchema instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TableSchema>
    implements org.apache.avro.data.RecordBuilder<TableSchema> {

    private java.lang.CharSequence database;
    private java.lang.CharSequence table;
    private long tableID;
    private long version;
    private java.util.List<com.pingcap.simple.avro.ColumnSchema> columns;
    private java.util.List<com.pingcap.simple.avro.IndexSchema> indexes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pingcap.simple.avro.TableSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.database)) {
        this.database = data().deepCopy(fields()[0].schema(), other.database);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.table)) {
        this.table = data().deepCopy(fields()[1].schema(), other.table);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.tableID)) {
        this.tableID = data().deepCopy(fields()[2].schema(), other.tableID);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.version)) {
        this.version = data().deepCopy(fields()[3].schema(), other.version);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.columns)) {
        this.columns = data().deepCopy(fields()[4].schema(), other.columns);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.indexes)) {
        this.indexes = data().deepCopy(fields()[5].schema(), other.indexes);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing TableSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pingcap.simple.avro.TableSchema other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.database)) {
        this.database = data().deepCopy(fields()[0].schema(), other.database);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.table)) {
        this.table = data().deepCopy(fields()[1].schema(), other.table);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tableID)) {
        this.tableID = data().deepCopy(fields()[2].schema(), other.tableID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.version)) {
        this.version = data().deepCopy(fields()[3].schema(), other.version);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.columns)) {
        this.columns = data().deepCopy(fields()[4].schema(), other.columns);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.indexes)) {
        this.indexes = data().deepCopy(fields()[5].schema(), other.indexes);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'database' field.
      * @return The value.
      */
    public java.lang.CharSequence getDatabase() {
      return database;
    }


    /**
      * Sets the value of the 'database' field.
      * @param value The value of 'database'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.TableSchema.Builder setDatabase(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.database = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'database' field has been set.
      * @return True if the 'database' field has been set, false otherwise.
      */
    public boolean hasDatabase() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'database' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.TableSchema.Builder clearDatabase() {
      database = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'table' field.
      * @return The value.
      */
    public java.lang.CharSequence getTable() {
      return table;
    }


    /**
      * Sets the value of the 'table' field.
      * @param value The value of 'table'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.TableSchema.Builder setTable(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.table = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'table' field has been set.
      * @return True if the 'table' field has been set, false otherwise.
      */
    public boolean hasTable() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'table' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.TableSchema.Builder clearTable() {
      table = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tableID' field.
      * @return The value.
      */
    public long getTableID() {
      return tableID;
    }


    /**
      * Sets the value of the 'tableID' field.
      * @param value The value of 'tableID'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.TableSchema.Builder setTableID(long value) {
      validate(fields()[2], value);
      this.tableID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tableID' field has been set.
      * @return True if the 'tableID' field has been set, false otherwise.
      */
    public boolean hasTableID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tableID' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.TableSchema.Builder clearTableID() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * @return The value.
      */
    public long getVersion() {
      return version;
    }


    /**
      * Sets the value of the 'version' field.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.TableSchema.Builder setVersion(long value) {
      validate(fields()[3], value);
      this.version = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'version' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.TableSchema.Builder clearVersion() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'columns' field.
      * @return The value.
      */
    public java.util.List<com.pingcap.simple.avro.ColumnSchema> getColumns() {
      return columns;
    }


    /**
      * Sets the value of the 'columns' field.
      * @param value The value of 'columns'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.TableSchema.Builder setColumns(java.util.List<com.pingcap.simple.avro.ColumnSchema> value) {
      validate(fields()[4], value);
      this.columns = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'columns' field has been set.
      * @return True if the 'columns' field has been set, false otherwise.
      */
    public boolean hasColumns() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'columns' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.TableSchema.Builder clearColumns() {
      columns = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'indexes' field.
      * @return The value.
      */
    public java.util.List<com.pingcap.simple.avro.IndexSchema> getIndexes() {
      return indexes;
    }


    /**
      * Sets the value of the 'indexes' field.
      * @param value The value of 'indexes'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.TableSchema.Builder setIndexes(java.util.List<com.pingcap.simple.avro.IndexSchema> value) {
      validate(fields()[5], value);
      this.indexes = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'indexes' field has been set.
      * @return True if the 'indexes' field has been set, false otherwise.
      */
    public boolean hasIndexes() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'indexes' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.TableSchema.Builder clearIndexes() {
      indexes = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TableSchema build() {
      try {
        TableSchema record = new TableSchema();
        record.database = fieldSetFlags()[0] ? this.database : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.table = fieldSetFlags()[1] ? this.table : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.tableID = fieldSetFlags()[2] ? this.tableID : (java.lang.Long) defaultValue(fields()[2]);
        record.version = fieldSetFlags()[3] ? this.version : (java.lang.Long) defaultValue(fields()[3]);
        record.columns = fieldSetFlags()[4] ? this.columns : (java.util.List<com.pingcap.simple.avro.ColumnSchema>) defaultValue(fields()[4]);
        record.indexes = fieldSetFlags()[5] ? this.indexes : (java.util.List<com.pingcap.simple.avro.IndexSchema>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TableSchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<TableSchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TableSchema>
    READER$ = (org.apache.avro.io.DatumReader<TableSchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.database);

    out.writeString(this.table);

    out.writeLong(this.tableID);

    out.writeLong(this.version);

    long size0 = this.columns.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.pingcap.simple.avro.ColumnSchema e0: this.columns) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.indexes.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (com.pingcap.simple.avro.IndexSchema e1: this.indexes) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.database = in.readString(this.database instanceof Utf8 ? (Utf8)this.database : null);

      this.table = in.readString(this.table instanceof Utf8 ? (Utf8)this.table : null);

      this.tableID = in.readLong();

      this.version = in.readLong();

      long size0 = in.readArrayStart();
      java.util.List<com.pingcap.simple.avro.ColumnSchema> a0 = this.columns;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.pingcap.simple.avro.ColumnSchema>((int)size0, SCHEMA$.getField("columns").schema());
        this.columns = a0;
      } else a0.clear();
      SpecificData.Array<com.pingcap.simple.avro.ColumnSchema> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.pingcap.simple.avro.ColumnSchema>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.pingcap.simple.avro.ColumnSchema e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.pingcap.simple.avro.ColumnSchema();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<com.pingcap.simple.avro.IndexSchema> a1 = this.indexes;
      if (a1 == null) {
        a1 = new SpecificData.Array<com.pingcap.simple.avro.IndexSchema>((int)size1, SCHEMA$.getField("indexes").schema());
        this.indexes = a1;
      } else a1.clear();
      SpecificData.Array<com.pingcap.simple.avro.IndexSchema> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.pingcap.simple.avro.IndexSchema>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          com.pingcap.simple.avro.IndexSchema e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new com.pingcap.simple.avro.IndexSchema();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.database = in.readString(this.database instanceof Utf8 ? (Utf8)this.database : null);
          break;

        case 1:
          this.table = in.readString(this.table instanceof Utf8 ? (Utf8)this.table : null);
          break;

        case 2:
          this.tableID = in.readLong();
          break;

        case 3:
          this.version = in.readLong();
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<com.pingcap.simple.avro.ColumnSchema> a0 = this.columns;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.pingcap.simple.avro.ColumnSchema>((int)size0, SCHEMA$.getField("columns").schema());
            this.columns = a0;
          } else a0.clear();
          SpecificData.Array<com.pingcap.simple.avro.ColumnSchema> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.pingcap.simple.avro.ColumnSchema>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.pingcap.simple.avro.ColumnSchema e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.pingcap.simple.avro.ColumnSchema();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 5:
          long size1 = in.readArrayStart();
          java.util.List<com.pingcap.simple.avro.IndexSchema> a1 = this.indexes;
          if (a1 == null) {
            a1 = new SpecificData.Array<com.pingcap.simple.avro.IndexSchema>((int)size1, SCHEMA$.getField("indexes").schema());
            this.indexes = a1;
          } else a1.clear();
          SpecificData.Array<com.pingcap.simple.avro.IndexSchema> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.pingcap.simple.avro.IndexSchema>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              com.pingcap.simple.avro.IndexSchema e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new com.pingcap.simple.avro.IndexSchema();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










