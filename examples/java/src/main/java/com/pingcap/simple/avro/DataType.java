/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pingcap.simple.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DataType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3942178107190641936L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataType\",\"namespace\":\"com.pingcap.simple.avro\",\"fields\":[{\"name\":\"mysqlType\",\"type\":\"string\"},{\"name\":\"charset\",\"type\":\"string\"},{\"name\":\"collate\",\"type\":\"string\"},{\"name\":\"length\",\"type\":\"long\"},{\"name\":\"decimal\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"elements\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"default\":null},{\"name\":\"unsigned\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"zerofill\",\"type\":[\"null\",\"boolean\"],\"default\":null}],\"docs\":\"each column's mysql type information\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DataType> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DataType> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DataType> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DataType> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DataType> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DataType to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DataType from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DataType instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DataType fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence mysqlType;
  private java.lang.CharSequence charset;
  private java.lang.CharSequence collate;
  private long length;
  private java.lang.Integer decimal;
  private java.util.List<java.lang.CharSequence> elements;
  private java.lang.Boolean unsigned;
  private java.lang.Boolean zerofill;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataType() {}

  /**
   * All-args constructor.
   * @param mysqlType The new value for mysqlType
   * @param charset The new value for charset
   * @param collate The new value for collate
   * @param length The new value for length
   * @param decimal The new value for decimal
   * @param elements The new value for elements
   * @param unsigned The new value for unsigned
   * @param zerofill The new value for zerofill
   */
  public DataType(java.lang.CharSequence mysqlType, java.lang.CharSequence charset, java.lang.CharSequence collate, java.lang.Long length, java.lang.Integer decimal, java.util.List<java.lang.CharSequence> elements, java.lang.Boolean unsigned, java.lang.Boolean zerofill) {
    this.mysqlType = mysqlType;
    this.charset = charset;
    this.collate = collate;
    this.length = length;
    this.decimal = decimal;
    this.elements = elements;
    this.unsigned = unsigned;
    this.zerofill = zerofill;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mysqlType;
    case 1: return charset;
    case 2: return collate;
    case 3: return length;
    case 4: return decimal;
    case 5: return elements;
    case 6: return unsigned;
    case 7: return zerofill;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mysqlType = (java.lang.CharSequence)value$; break;
    case 1: charset = (java.lang.CharSequence)value$; break;
    case 2: collate = (java.lang.CharSequence)value$; break;
    case 3: length = (java.lang.Long)value$; break;
    case 4: decimal = (java.lang.Integer)value$; break;
    case 5: elements = (java.util.List<java.lang.CharSequence>)value$; break;
    case 6: unsigned = (java.lang.Boolean)value$; break;
    case 7: zerofill = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'mysqlType' field.
   * @return The value of the 'mysqlType' field.
   */
  public java.lang.CharSequence getMysqlType() {
    return mysqlType;
  }


  /**
   * Sets the value of the 'mysqlType' field.
   * @param value the value to set.
   */
  public void setMysqlType(java.lang.CharSequence value) {
    this.mysqlType = value;
  }

  /**
   * Gets the value of the 'charset' field.
   * @return The value of the 'charset' field.
   */
  public java.lang.CharSequence getCharset() {
    return charset;
  }


  /**
   * Sets the value of the 'charset' field.
   * @param value the value to set.
   */
  public void setCharset(java.lang.CharSequence value) {
    this.charset = value;
  }

  /**
   * Gets the value of the 'collate' field.
   * @return The value of the 'collate' field.
   */
  public java.lang.CharSequence getCollate() {
    return collate;
  }


  /**
   * Sets the value of the 'collate' field.
   * @param value the value to set.
   */
  public void setCollate(java.lang.CharSequence value) {
    this.collate = value;
  }

  /**
   * Gets the value of the 'length' field.
   * @return The value of the 'length' field.
   */
  public long getLength() {
    return length;
  }


  /**
   * Sets the value of the 'length' field.
   * @param value the value to set.
   */
  public void setLength(long value) {
    this.length = value;
  }

  /**
   * Gets the value of the 'decimal' field.
   * @return The value of the 'decimal' field.
   */
  public java.lang.Integer getDecimal() {
    return decimal;
  }


  /**
   * Sets the value of the 'decimal' field.
   * @param value the value to set.
   */
  public void setDecimal(java.lang.Integer value) {
    this.decimal = value;
  }

  /**
   * Gets the value of the 'elements' field.
   * @return The value of the 'elements' field.
   */
  public java.util.List<java.lang.CharSequence> getElements() {
    return elements;
  }


  /**
   * Sets the value of the 'elements' field.
   * @param value the value to set.
   */
  public void setElements(java.util.List<java.lang.CharSequence> value) {
    this.elements = value;
  }

  /**
   * Gets the value of the 'unsigned' field.
   * @return The value of the 'unsigned' field.
   */
  public java.lang.Boolean getUnsigned() {
    return unsigned;
  }


  /**
   * Sets the value of the 'unsigned' field.
   * @param value the value to set.
   */
  public void setUnsigned(java.lang.Boolean value) {
    this.unsigned = value;
  }

  /**
   * Gets the value of the 'zerofill' field.
   * @return The value of the 'zerofill' field.
   */
  public java.lang.Boolean getZerofill() {
    return zerofill;
  }


  /**
   * Sets the value of the 'zerofill' field.
   * @param value the value to set.
   */
  public void setZerofill(java.lang.Boolean value) {
    this.zerofill = value;
  }

  /**
   * Creates a new DataType RecordBuilder.
   * @return A new DataType RecordBuilder
   */
  public static com.pingcap.simple.avro.DataType.Builder newBuilder() {
    return new com.pingcap.simple.avro.DataType.Builder();
  }

  /**
   * Creates a new DataType RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataType RecordBuilder
   */
  public static com.pingcap.simple.avro.DataType.Builder newBuilder(com.pingcap.simple.avro.DataType.Builder other) {
    if (other == null) {
      return new com.pingcap.simple.avro.DataType.Builder();
    } else {
      return new com.pingcap.simple.avro.DataType.Builder(other);
    }
  }

  /**
   * Creates a new DataType RecordBuilder by copying an existing DataType instance.
   * @param other The existing instance to copy.
   * @return A new DataType RecordBuilder
   */
  public static com.pingcap.simple.avro.DataType.Builder newBuilder(com.pingcap.simple.avro.DataType other) {
    if (other == null) {
      return new com.pingcap.simple.avro.DataType.Builder();
    } else {
      return new com.pingcap.simple.avro.DataType.Builder(other);
    }
  }

  /**
   * RecordBuilder for DataType instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataType>
    implements org.apache.avro.data.RecordBuilder<DataType> {

    private java.lang.CharSequence mysqlType;
    private java.lang.CharSequence charset;
    private java.lang.CharSequence collate;
    private long length;
    private java.lang.Integer decimal;
    private java.util.List<java.lang.CharSequence> elements;
    private java.lang.Boolean unsigned;
    private java.lang.Boolean zerofill;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pingcap.simple.avro.DataType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mysqlType)) {
        this.mysqlType = data().deepCopy(fields()[0].schema(), other.mysqlType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.charset)) {
        this.charset = data().deepCopy(fields()[1].schema(), other.charset);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.collate)) {
        this.collate = data().deepCopy(fields()[2].schema(), other.collate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.length)) {
        this.length = data().deepCopy(fields()[3].schema(), other.length);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.decimal)) {
        this.decimal = data().deepCopy(fields()[4].schema(), other.decimal);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.elements)) {
        this.elements = data().deepCopy(fields()[5].schema(), other.elements);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.unsigned)) {
        this.unsigned = data().deepCopy(fields()[6].schema(), other.unsigned);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.zerofill)) {
        this.zerofill = data().deepCopy(fields()[7].schema(), other.zerofill);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing DataType instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pingcap.simple.avro.DataType other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.mysqlType)) {
        this.mysqlType = data().deepCopy(fields()[0].schema(), other.mysqlType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.charset)) {
        this.charset = data().deepCopy(fields()[1].schema(), other.charset);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.collate)) {
        this.collate = data().deepCopy(fields()[2].schema(), other.collate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.length)) {
        this.length = data().deepCopy(fields()[3].schema(), other.length);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.decimal)) {
        this.decimal = data().deepCopy(fields()[4].schema(), other.decimal);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.elements)) {
        this.elements = data().deepCopy(fields()[5].schema(), other.elements);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.unsigned)) {
        this.unsigned = data().deepCopy(fields()[6].schema(), other.unsigned);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.zerofill)) {
        this.zerofill = data().deepCopy(fields()[7].schema(), other.zerofill);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'mysqlType' field.
      * @return The value.
      */
    public java.lang.CharSequence getMysqlType() {
      return mysqlType;
    }


    /**
      * Sets the value of the 'mysqlType' field.
      * @param value The value of 'mysqlType'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.DataType.Builder setMysqlType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.mysqlType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mysqlType' field has been set.
      * @return True if the 'mysqlType' field has been set, false otherwise.
      */
    public boolean hasMysqlType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mysqlType' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.DataType.Builder clearMysqlType() {
      mysqlType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'charset' field.
      * @return The value.
      */
    public java.lang.CharSequence getCharset() {
      return charset;
    }


    /**
      * Sets the value of the 'charset' field.
      * @param value The value of 'charset'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.DataType.Builder setCharset(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.charset = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'charset' field has been set.
      * @return True if the 'charset' field has been set, false otherwise.
      */
    public boolean hasCharset() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'charset' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.DataType.Builder clearCharset() {
      charset = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'collate' field.
      * @return The value.
      */
    public java.lang.CharSequence getCollate() {
      return collate;
    }


    /**
      * Sets the value of the 'collate' field.
      * @param value The value of 'collate'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.DataType.Builder setCollate(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.collate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'collate' field has been set.
      * @return True if the 'collate' field has been set, false otherwise.
      */
    public boolean hasCollate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'collate' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.DataType.Builder clearCollate() {
      collate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'length' field.
      * @return The value.
      */
    public long getLength() {
      return length;
    }


    /**
      * Sets the value of the 'length' field.
      * @param value The value of 'length'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.DataType.Builder setLength(long value) {
      validate(fields()[3], value);
      this.length = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'length' field has been set.
      * @return True if the 'length' field has been set, false otherwise.
      */
    public boolean hasLength() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'length' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.DataType.Builder clearLength() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'decimal' field.
      * @return The value.
      */
    public java.lang.Integer getDecimal() {
      return decimal;
    }


    /**
      * Sets the value of the 'decimal' field.
      * @param value The value of 'decimal'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.DataType.Builder setDecimal(java.lang.Integer value) {
      validate(fields()[4], value);
      this.decimal = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'decimal' field has been set.
      * @return True if the 'decimal' field has been set, false otherwise.
      */
    public boolean hasDecimal() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'decimal' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.DataType.Builder clearDecimal() {
      decimal = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'elements' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getElements() {
      return elements;
    }


    /**
      * Sets the value of the 'elements' field.
      * @param value The value of 'elements'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.DataType.Builder setElements(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.elements = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'elements' field has been set.
      * @return True if the 'elements' field has been set, false otherwise.
      */
    public boolean hasElements() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'elements' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.DataType.Builder clearElements() {
      elements = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'unsigned' field.
      * @return The value.
      */
    public java.lang.Boolean getUnsigned() {
      return unsigned;
    }


    /**
      * Sets the value of the 'unsigned' field.
      * @param value The value of 'unsigned'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.DataType.Builder setUnsigned(java.lang.Boolean value) {
      validate(fields()[6], value);
      this.unsigned = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'unsigned' field has been set.
      * @return True if the 'unsigned' field has been set, false otherwise.
      */
    public boolean hasUnsigned() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'unsigned' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.DataType.Builder clearUnsigned() {
      unsigned = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'zerofill' field.
      * @return The value.
      */
    public java.lang.Boolean getZerofill() {
      return zerofill;
    }


    /**
      * Sets the value of the 'zerofill' field.
      * @param value The value of 'zerofill'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.DataType.Builder setZerofill(java.lang.Boolean value) {
      validate(fields()[7], value);
      this.zerofill = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'zerofill' field has been set.
      * @return True if the 'zerofill' field has been set, false otherwise.
      */
    public boolean hasZerofill() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'zerofill' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.DataType.Builder clearZerofill() {
      zerofill = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DataType build() {
      try {
        DataType record = new DataType();
        record.mysqlType = fieldSetFlags()[0] ? this.mysqlType : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.charset = fieldSetFlags()[1] ? this.charset : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.collate = fieldSetFlags()[2] ? this.collate : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.length = fieldSetFlags()[3] ? this.length : (java.lang.Long) defaultValue(fields()[3]);
        record.decimal = fieldSetFlags()[4] ? this.decimal : (java.lang.Integer) defaultValue(fields()[4]);
        record.elements = fieldSetFlags()[5] ? this.elements : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[5]);
        record.unsigned = fieldSetFlags()[6] ? this.unsigned : (java.lang.Boolean) defaultValue(fields()[6]);
        record.zerofill = fieldSetFlags()[7] ? this.zerofill : (java.lang.Boolean) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DataType>
    WRITER$ = (org.apache.avro.io.DatumWriter<DataType>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DataType>
    READER$ = (org.apache.avro.io.DatumReader<DataType>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.mysqlType);

    out.writeString(this.charset);

    out.writeString(this.collate);

    out.writeLong(this.length);

    if (this.decimal == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.decimal);
    }

    if (this.elements == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.elements.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.CharSequence e0: this.elements) {
        actualSize0++;
        out.startItem();
        out.writeString(e0);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.unsigned == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.unsigned);
    }

    if (this.zerofill == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.zerofill);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.mysqlType = in.readString(this.mysqlType instanceof Utf8 ? (Utf8)this.mysqlType : null);

      this.charset = in.readString(this.charset instanceof Utf8 ? (Utf8)this.charset : null);

      this.collate = in.readString(this.collate instanceof Utf8 ? (Utf8)this.collate : null);

      this.length = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.decimal = null;
      } else {
        this.decimal = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.elements = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a0 = this.elements;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("elements").schema().getTypes().get(1));
          this.elements = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
            e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.unsigned = null;
      } else {
        this.unsigned = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.zerofill = null;
      } else {
        this.zerofill = in.readBoolean();
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.mysqlType = in.readString(this.mysqlType instanceof Utf8 ? (Utf8)this.mysqlType : null);
          break;

        case 1:
          this.charset = in.readString(this.charset instanceof Utf8 ? (Utf8)this.charset : null);
          break;

        case 2:
          this.collate = in.readString(this.collate instanceof Utf8 ? (Utf8)this.collate : null);
          break;

        case 3:
          this.length = in.readLong();
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.decimal = null;
          } else {
            this.decimal = in.readInt();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.elements = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a0 = this.elements;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("elements").schema().getTypes().get(1));
              this.elements = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
                e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
                a0.add(e0);
              }
            }
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.unsigned = null;
          } else {
            this.unsigned = in.readBoolean();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.zerofill = null;
          } else {
            this.zerofill = in.readBoolean();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










