/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pingcap.simple.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Checksum extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3735077841681402955L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Checksum\",\"namespace\":\"com.pingcap.simple.avro\",\"fields\":[{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"corrupted\",\"type\":\"boolean\"},{\"name\":\"current\",\"type\":\"long\"},{\"name\":\"previous\",\"type\":\"long\"}],\"docs\":\"event's e2e checksum information\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Checksum> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Checksum> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Checksum> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Checksum> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Checksum> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Checksum to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Checksum from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Checksum instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Checksum fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int version;
  private boolean corrupted;
  private long current;
  private long previous;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Checksum() {}

  /**
   * All-args constructor.
   * @param version The new value for version
   * @param corrupted The new value for corrupted
   * @param current The new value for current
   * @param previous The new value for previous
   */
  public Checksum(java.lang.Integer version, java.lang.Boolean corrupted, java.lang.Long current, java.lang.Long previous) {
    this.version = version;
    this.corrupted = corrupted;
    this.current = current;
    this.previous = previous;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return version;
    case 1: return corrupted;
    case 2: return current;
    case 3: return previous;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: version = (java.lang.Integer)value$; break;
    case 1: corrupted = (java.lang.Boolean)value$; break;
    case 2: current = (java.lang.Long)value$; break;
    case 3: previous = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'version' field.
   * @return The value of the 'version' field.
   */
  public int getVersion() {
    return version;
  }


  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(int value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'corrupted' field.
   * @return The value of the 'corrupted' field.
   */
  public boolean getCorrupted() {
    return corrupted;
  }


  /**
   * Sets the value of the 'corrupted' field.
   * @param value the value to set.
   */
  public void setCorrupted(boolean value) {
    this.corrupted = value;
  }

  /**
   * Gets the value of the 'current' field.
   * @return The value of the 'current' field.
   */
  public long getCurrent() {
    return current;
  }


  /**
   * Sets the value of the 'current' field.
   * @param value the value to set.
   */
  public void setCurrent(long value) {
    this.current = value;
  }

  /**
   * Gets the value of the 'previous' field.
   * @return The value of the 'previous' field.
   */
  public long getPrevious() {
    return previous;
  }


  /**
   * Sets the value of the 'previous' field.
   * @param value the value to set.
   */
  public void setPrevious(long value) {
    this.previous = value;
  }

  /**
   * Creates a new Checksum RecordBuilder.
   * @return A new Checksum RecordBuilder
   */
  public static com.pingcap.simple.avro.Checksum.Builder newBuilder() {
    return new com.pingcap.simple.avro.Checksum.Builder();
  }

  /**
   * Creates a new Checksum RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Checksum RecordBuilder
   */
  public static com.pingcap.simple.avro.Checksum.Builder newBuilder(com.pingcap.simple.avro.Checksum.Builder other) {
    if (other == null) {
      return new com.pingcap.simple.avro.Checksum.Builder();
    } else {
      return new com.pingcap.simple.avro.Checksum.Builder(other);
    }
  }

  /**
   * Creates a new Checksum RecordBuilder by copying an existing Checksum instance.
   * @param other The existing instance to copy.
   * @return A new Checksum RecordBuilder
   */
  public static com.pingcap.simple.avro.Checksum.Builder newBuilder(com.pingcap.simple.avro.Checksum other) {
    if (other == null) {
      return new com.pingcap.simple.avro.Checksum.Builder();
    } else {
      return new com.pingcap.simple.avro.Checksum.Builder(other);
    }
  }

  /**
   * RecordBuilder for Checksum instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Checksum>
    implements org.apache.avro.data.RecordBuilder<Checksum> {

    private int version;
    private boolean corrupted;
    private long current;
    private long previous;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pingcap.simple.avro.Checksum.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.version)) {
        this.version = data().deepCopy(fields()[0].schema(), other.version);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.corrupted)) {
        this.corrupted = data().deepCopy(fields()[1].schema(), other.corrupted);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.current)) {
        this.current = data().deepCopy(fields()[2].schema(), other.current);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.previous)) {
        this.previous = data().deepCopy(fields()[3].schema(), other.previous);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Checksum instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pingcap.simple.avro.Checksum other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.version)) {
        this.version = data().deepCopy(fields()[0].schema(), other.version);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.corrupted)) {
        this.corrupted = data().deepCopy(fields()[1].schema(), other.corrupted);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.current)) {
        this.current = data().deepCopy(fields()[2].schema(), other.current);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.previous)) {
        this.previous = data().deepCopy(fields()[3].schema(), other.previous);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'version' field.
      * @return The value.
      */
    public int getVersion() {
      return version;
    }


    /**
      * Sets the value of the 'version' field.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.Checksum.Builder setVersion(int value) {
      validate(fields()[0], value);
      this.version = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'version' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.Checksum.Builder clearVersion() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'corrupted' field.
      * @return The value.
      */
    public boolean getCorrupted() {
      return corrupted;
    }


    /**
      * Sets the value of the 'corrupted' field.
      * @param value The value of 'corrupted'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.Checksum.Builder setCorrupted(boolean value) {
      validate(fields()[1], value);
      this.corrupted = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'corrupted' field has been set.
      * @return True if the 'corrupted' field has been set, false otherwise.
      */
    public boolean hasCorrupted() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'corrupted' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.Checksum.Builder clearCorrupted() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'current' field.
      * @return The value.
      */
    public long getCurrent() {
      return current;
    }


    /**
      * Sets the value of the 'current' field.
      * @param value The value of 'current'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.Checksum.Builder setCurrent(long value) {
      validate(fields()[2], value);
      this.current = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'current' field has been set.
      * @return True if the 'current' field has been set, false otherwise.
      */
    public boolean hasCurrent() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'current' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.Checksum.Builder clearCurrent() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'previous' field.
      * @return The value.
      */
    public long getPrevious() {
      return previous;
    }


    /**
      * Sets the value of the 'previous' field.
      * @param value The value of 'previous'.
      * @return This builder.
      */
    public com.pingcap.simple.avro.Checksum.Builder setPrevious(long value) {
      validate(fields()[3], value);
      this.previous = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'previous' field has been set.
      * @return True if the 'previous' field has been set, false otherwise.
      */
    public boolean hasPrevious() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'previous' field.
      * @return This builder.
      */
    public com.pingcap.simple.avro.Checksum.Builder clearPrevious() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Checksum build() {
      try {
        Checksum record = new Checksum();
        record.version = fieldSetFlags()[0] ? this.version : (java.lang.Integer) defaultValue(fields()[0]);
        record.corrupted = fieldSetFlags()[1] ? this.corrupted : (java.lang.Boolean) defaultValue(fields()[1]);
        record.current = fieldSetFlags()[2] ? this.current : (java.lang.Long) defaultValue(fields()[2]);
        record.previous = fieldSetFlags()[3] ? this.previous : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Checksum>
    WRITER$ = (org.apache.avro.io.DatumWriter<Checksum>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Checksum>
    READER$ = (org.apache.avro.io.DatumReader<Checksum>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.version);

    out.writeBoolean(this.corrupted);

    out.writeLong(this.current);

    out.writeLong(this.previous);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.version = in.readInt();

      this.corrupted = in.readBoolean();

      this.current = in.readLong();

      this.previous = in.readLong();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.version = in.readInt();
          break;

        case 1:
          this.corrupted = in.readBoolean();
          break;

        case 2:
          this.current = in.readLong();
          break;

        case 3:
          this.previous = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










